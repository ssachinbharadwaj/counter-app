{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","react_default","a","createElement","className","href","totalCounters","Counter","_this","this","getBadgeClasses","formatCount","onClick","onIncrement","counter","onDelete","id","classes","value","Component","Counters","onReset","counters","map","components_counter","key","App","state","handleIncrement","Object","toConsumableArray","index","indexOf","objectSpread","setState","handleDelete","counterId","filter","c","handleReset","Fragment","navbar","length","components_counters","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QAeeA,EAbA,SAAAC,GACb,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeC,KAAK,KAAjC,SACS,IACPJ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oCACbJ,EAAMM,kBC0BFC,0LA/BJ,IAAAC,EAAAC,KACP,OACER,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAWK,KAAKC,mBAAoBD,KAAKE,eAC/CV,EAAAC,EAAAC,cAAA,UACES,QAAS,kBAAMJ,EAAKR,MAAMa,YAAYL,EAAKR,MAAMc,UACjDV,UAAU,4BAFZ,aAMAH,EAAAC,EAAAC,cAAA,UACES,QAAS,kBAAMJ,EAAKR,MAAMe,SAASP,EAAKR,MAAMc,QAAQE,KACtDZ,UAAU,6BAFZ,qDAWJ,IAAIa,EAAU,mBAEd,OADAA,GAAwC,IAA7BR,KAAKT,MAAMc,QAAQI,MAAc,UAAY,gDAKxD,OAAoC,IAA7BT,KAAKT,MAAMc,QAAQI,MAAc,OAAST,KAAKT,MAAMc,QAAQI,aA5BlDC,cCwBPC,mLAtBJ,IAAAZ,EAAAC,KACP,OACER,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACES,QAASH,KAAKT,MAAMqB,QACpBjB,UAAU,8BAFZ,SAMCK,KAAKT,MAAMsB,SAASC,IAAI,SAAAT,GAAO,OAC9Bb,EAAAC,EAAAC,cAACqB,EAAD,CACEC,IAAKX,EAAQE,GACbD,SAAUP,EAAKR,MAAMe,SACrBF,YAAaL,EAAKR,MAAMa,YACxBC,QAASA,cAfEK,aCmDRO,6MAhDbC,MAAQ,CACNL,SAAU,CACR,CAAEN,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,MAAO,OAIpBU,gBAAkB,SAAAd,GAChB,IAAMQ,EAAQO,OAAAC,EAAA,EAAAD,CAAOrB,EAAKmB,MAAML,UAC1BS,EAAQT,EAASU,QAAQlB,GAC/BQ,EAASS,GAATF,OAAAI,EAAA,EAAAJ,CAAA,GAAuBf,GACvBQ,EAASS,GAAOb,QAChBV,EAAK0B,SAAS,CAAEZ,gBAGlBa,aAAe,SAAAC,GACb,IAAMd,EAAWd,EAAKmB,MAAML,SAASe,OAAO,SAAAC,GAAC,OAAIA,EAAEtB,KAAOoB,IAC1D5B,EAAK0B,SAAS,CAAEZ,gBAGlBiB,YAAc,WACZ,IAAMjB,EAAWd,EAAKmB,MAAML,SAASC,IAAI,SAAAe,GAEvC,OADAA,EAAEpB,MAAQ,EACHoB,IAET9B,EAAK0B,SAAS,CAAEZ,sFAGhB,OACErB,EAAAC,EAAAC,cAACF,EAAAC,EAAMsC,SAAP,KACEvC,EAAAC,EAAAC,cAACsC,EAAD,CACEnC,cAAeG,KAAKkB,MAAML,SAASe,OAAO,SAAAC,GAAC,OAAIA,EAAEpB,MAAQ,IAAGwB,SAE9DzC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aACdH,EAAAC,EAAAC,cAACwC,EAAD,CACErB,SAAUb,KAAKkB,MAAML,SACrBD,QAASZ,KAAK8B,YACd1B,YAAaJ,KAAKmB,gBAClBb,SAAUN,KAAK0B,wBAzCThB,aCOEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SDsH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c9c41341.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nconst NavBar = props => {\n  return (\n    <nav className=\"navbar navbar-light bg-light\">\n      <a className=\"navbar-brand\" href=\"#\">\n        Navbar{\" \"}\n        <span className=\"badge badge-pill badge-secondary\">\n          {props.totalCounters}\n        </span>\n      </a>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import React, { Component } from \"react\";\n\nclass Counter extends Component {\n  render() {\n    return (\n      <div>\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\n        <button\n          onClick={() => this.props.onIncrement(this.props.counter)}\n          className=\"btn btn-secondary btn-sm\"\n        >\n          Increment\n        </button>\n        <button\n          onClick={() => this.props.onDelete(this.props.counter.id)}\n          className=\"btn btn-danger btn-sm m-2\"\n        >\n          Delete\n        </button>\n      </div>\n    );\n  }\n\n  getBadgeClasses() {\n    let classes = \"badge m-2 badge-\";\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  formatCount() {\n    return this.props.counter.value === 0 ? \"Zero\" : this.props.counter.value;\n  }\n}\n\nexport default Counter;\n","import React, { Component } from \"react\";\nimport Counter from \"./counter\";\n\nclass Counters extends Component {\n  render() {\n    return (\n      <div>\n        <button\n          onClick={this.props.onReset}\n          className=\"btn btn-primary btn-sm-m-2\"\n        >\n          Reset\n        </button>\n        {this.props.counters.map(counter => (\n          <Counter\n            key={counter.id}\n            onDelete={this.props.onDelete}\n            onIncrement={this.props.onIncrement}\n            counter={counter}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Counters;\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/navbar\";\nimport \"./App.css\";\nimport Counters from \"./components/counters\";\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 0 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 }\n    ]\n  };\n\n  handleIncrement = counter => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value++;\n    this.setState({ counters });\n  };\n\n  handleDelete = counterId => {\n    const counters = this.state.counters.filter(c => c.id !== counterId);\n    this.setState({ counters });\n  };\n\n  handleReset = () => {\n    const counters = this.state.counters.map(c => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters });\n  };\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar\n          totalCounters={this.state.counters.filter(c => c.value > 0).length}\n        />\n        <main className=\"container\">\n          <Counters\n            counters={this.state.counters}\n            onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n            onDelete={this.handleDelete}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}